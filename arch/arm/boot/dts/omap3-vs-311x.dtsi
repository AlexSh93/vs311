/*
 * Copyright (C) 2012 Florian Vaussard, EPFL Mobots group
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
 
#include "omap36xx.dtsi"
#include "omap3-var-som-om3x-usb.dtsi"
/ {
	sound {
		compatible = "ti,omap-twl4030";
		ti,model = "var-som-om3x";

		ti,mcbsp = <&mcbsp2>;
		ti,codec = <&twl_audio>;
	};

	vddvario: regulator-vddvario {
		compatible = "regulator-fixed";
		regulator-name = "vddvario";
		regulator-always-on;
	};

	vdd33a: regulator-vdd33a {
		compatible = "regulator-fixed";
		regulator-name = "vdd33a";
                gpio = <&gpio5 9 0>;
                enable-active-high;
		regulator-always-on;
	};
};

&omap3_pmx_core {
	pinctrl-names = "default";
	pinctrl-0 = <&smsc_pins1>;

	uart2_pins: pinmux_uart2_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x216c, PIN_INPUT | MUX_MODE1)	/* mcbsp3_dx.uart2_cts */
			OMAP3_CORE1_IOPAD(0x216e, PIN_OUTPUT | MUX_MODE1)	/* mcbsp3_dr.uart2_rts */
			OMAP3_CORE1_IOPAD(0x2170, PIN_OUTPUT | MUX_MODE1)	/* mcbsp3_clk.uart2_tx */
			OMAP3_CORE1_IOPAD(0x2172, PIN_INPUT | MUX_MODE1)	/* mcbsp3_fsx.uart2_rx */
		>;
	};

	i2c1_pins: pinmux_i2c1_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x21ba, PIN_INPUT | MUX_MODE0)		/* i2c1_scl.i2c1_scl */
			OMAP3_CORE1_IOPAD(0x21bc, PIN_INPUT | MUX_MODE0)		/* i2c1_sda.i2c1_sda */
		>;
	};

	i2c3_pins: pinmux_i2c3_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x21c2, PIN_INPUT | MUX_MODE0)		/* i2c3_scl.i2c3_scl */
			OMAP3_CORE1_IOPAD(0x21c4, PIN_INPUT | MUX_MODE0)		/* i2c3_sda.i2c3_sda */
		>;
	};

	i2c4_pins: pinmux_i2c4_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x2a00, PIN_INPUT | MUX_MODE0)		/* i2c4_scl.i2c4_scl */
			OMAP3_CORE1_IOPAD(0x2a02, PIN_INPUT | MUX_MODE0)		/* i2c4_sda.i2c4_sda */
		>;
	};


	mmc1_pins: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x2144, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc1_clk.sdmmc1_clk */
			OMAP3_CORE1_IOPAD(0x2146, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc1_cmd.sdmmc1_cmd */
			OMAP3_CORE1_IOPAD(0x2148, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc1_dat0.sdmmc1_dat0 */
			OMAP3_CORE1_IOPAD(0x214a, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc1_dat1.sdmmc1_dat1 */
			OMAP3_CORE1_IOPAD(0x214c, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc1_dat2.sdmmc1_dat2 */
			OMAP3_CORE1_IOPAD(0x214e, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc1_dat3.sdmmc1_dat3 */
		>;
	};

	mmc2_pins: pinmux_mmc2_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x2158, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc2_clk.sdmmc2_clk */
			OMAP3_CORE1_IOPAD(0x215a, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc2_cmd.sdmmc2_cmd */
			OMAP3_CORE1_IOPAD(0x215c, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc2_dat0.sdmmc2_dat0 */
			OMAP3_CORE1_IOPAD(0x215e, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc2_dat1.sdmmc2_dat1 */
			OMAP3_CORE1_IOPAD(0x2160, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc2_dat2.sdmmc2_dat2 */
			OMAP3_CORE1_IOPAD(0x2162, PIN_INPUT_PULLUP | MUX_MODE0)		/* sdmmc2_dat3.sdmmc2_dat3 */
		>;
	};

 	hsusb0_pins: pinmux_hsusb0_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x21a2, PIN_OUTPUT | MUX_MODE0)		/* hsusb0_clk.hsusb0_clk */
			OMAP3_CORE1_IOPAD(0x21a4, PIN_OUTPUT | MUX_MODE0)		/* hsusb0_stp.hsusb0_stp */
			OMAP3_CORE1_IOPAD(0x21a6, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_dir.hsusb0_dir */
			OMAP3_CORE1_IOPAD(0x21a8, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_nxt.hsusb0_nxt */
			OMAP3_CORE1_IOPAD(0x21aa, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data0.hsusb2_data0 */
			OMAP3_CORE1_IOPAD(0x21ac, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data1.hsusb0_data1 */
			OMAP3_CORE1_IOPAD(0x21ae, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data2.hsusb0_data2 */
			OMAP3_CORE1_IOPAD(0x21b0, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data3.hsusb0_data3 */
			OMAP3_CORE1_IOPAD(0x21b2, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data4.hsusb0_data4 */
			OMAP3_CORE1_IOPAD(0x21b4, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data5.hsusb0_data5 */
			OMAP3_CORE1_IOPAD(0x21b6, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data6.hsusb0_data6 */
			OMAP3_CORE1_IOPAD(0x21b8, PIN_INPUT_PULLDOWN | MUX_MODE0)	/* hsusb0_data7.hsusb0_data7 */
		>;
	};

	smsc_pins: pinmux_smsc_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x20B6, PIN_OUTPUT | MUX_MODE0)	/* gpmc_ncs4.gpio_55 */
		>;
	};

	smsc_pins1: pinmux_smsc_pins1 {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x2114, PIN_INPUT_PULLUP | MUX_MODE4)		/* cam_fld.gpio_98 */
		>;
	};
	
	smsc_pins2: pinmux_smsc_pins2 {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x217e, PIN_INPUT_PULLDOWN | MUX_MODE4)	     /* uart1_rts.gpio_149 */
		>;
	};

	mcspi1_pins: pinmux_mcspi1_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x21c8, PIN_INPUT | MUX_MODE0)	/* mcspi1_clk.mcspi1_clk */
			OMAP3_CORE1_IOPAD(0x21ca, PIN_INPUT | MUX_MODE0)	/* mcspi1_simo.mcspi1_simo */
			OMAP3_CORE1_IOPAD(0x21cc, PIN_INPUT | MUX_MODE0)	/* mcspi1_somi.mcspi1_somi */
			OMAP3_CORE1_IOPAD(0x21ce, PIN_INPUT | MUX_MODE0)	/* mcspi1_cs0.mcspi1_cs0 */
		>;
	};
	
	ads7846_pins: pinmux_ads7846_pins {
		pinctrl-single,pins = <
			OMAP3_CORE1_IOPAD(0x21d4, PIN_INPUT_PULLDOWN | MUX_MODE4)	/* mcspi1_cs3.gpio_177 */
		>;
	};
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;
	clock-frequency = <2600000>;

	twl: twl@48 {
		reg = <0x48>;
		interrupts = <7>; /* SYS_NIRQ cascaded to intc */
		interrupt-parent = <&intc>;

		twl_audio: audio {
			compatible = "ti,twl4030-audio";
			codec {
			};
		};
	};
};

#include "twl4030.dtsi"
#include "twl4030_omap3.dtsi"

&mcspi1 {
	pinctrl-names = "default";
	pinctrl-0 = <&mcspi1_pins>;

	/* touch controller */
	ads7846@0 {
		pinctrl-names = "default";
		pinctrl-0 = <&ads7846_pins>;

		compatible = "ti,ads7846";
		vcc-supply = <&vdd33a>;

		reg = <0>;				/* CS0 */
		spi-max-frequency = <1500000>;

		interrupt-parent = <&gpio6>;
		interrupts = <17 0>;			/* gpio_177 */
		pendown-gpio = <&gpio6 17 0>;

		ti,x-min = /bits/ 16 <0x0>;
		ti,x-max = /bits/ 16 <0x0fff>;
		ti,y-min = /bits/ 16 <0x0>;
		ti,y-max = /bits/ 16 <0x0fff>;
		ti,x-plate-ohms = /bits/ 16 <180>;
		ti,pressure-max = /bits/ 16 <255>;

		linux,wakeup;
	};
};

/* i2c2 pins are NC */
&i2c2 {
	status = "disabled";
};

&usb_otg_hs {
	pinctrl-names = "default";
	pinctrl-0 = <&hsusb0_pins>;
	interface-type = <0>;
	usb-phy = <&usb2_phy>;
	phys = <&usb2_phy>;
	phy-names = "usb2-phy";
	mode = <3>;
	power = <50>;
};

&uart1 {
	status = "disabled";
};

&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart2_pins>;
};

&mcbsp2 {
    status = "okay";
};

&gpmc {
	ranges = <0 0 0x00000000 0x20000000>,/* CS0 */
		 <4 0 0x2b000000 0x1000000>;	 /* CS4 */
		 
	nand@0,0 {
		linux,mtd-name= "micron,mt29c4g96maz";
		reg = <0 0 0>;
		nand-bus-width = <16>;
		gpmc,device-width = <2>;
		ti,nand-ecc-opt = "bch8";

		gpmc,sync-clk-ps = <0>;
		gpmc,cs-on-ns = <0>;
		gpmc,cs-rd-off-ns = <44>;
		gpmc,cs-wr-off-ns = <44>;
		gpmc,adv-on-ns = <6>;
		gpmc,adv-rd-off-ns = <34>;
		gpmc,adv-wr-off-ns = <44>;
		gpmc,we-off-ns = <40>;
		gpmc,oe-off-ns = <54>;
		gpmc,access-ns = <64>;
		gpmc,rd-cycle-ns = <82>;
		gpmc,wr-cycle-ns = <82>;
		gpmc,wr-access-ns = <40>;
		gpmc,wr-data-mux-bus-ns = <0>;

		#address-cells = <1>;
		#size-cells = <1>;

		partition@0 {
			label = "SPL";
			reg = <0 0x80000>; /* 512KiB */
		};
		partition@80000 {
			label = "U-Boot";
			reg = <0x80000 0x1C0000>; /* 1792KiB */
		};
		partition@1c0000 {
			label = "Environment";
			reg = <0x240000 0x40000>; /* 256KiB */
		};
		partition@280000 {
			label = "Kernel";
			reg = <0x280000 0x800000>; /* 8192KiB */
		};
		partition@780000 {
			label = "Filesystem";
			reg = <0xA80000 0>;
			/* HACK: MTDPART_SIZ_FULL=0 so fill to end */
		};
	};
	
	smsc2: ethernet@gpmc {
		compatible = "smsc,lan9115", "smsc,lan9118";
		/**/
		bank-width = <2>;
		gpmc,mux-add-data;
		/*
		gpmc,device-width = <1>; 
		/*Общая ширина устройства (устройств), подключенного к консоли управления
		чип-выберите в байтах. Консоль управления групповыми политиками поддерживает 8-битные
		и 16-разрядные устройства и поэтому это свойство должно быть
		1 или 2.*/


		gpmc,cycle2cycle-samecsen; 
		/*Add "cycle2cycle-delay" between successive
		accesses to the same CS
		Добавить "cycle2cycle задержку" между последовательными
		получает доступ к той же CS
		*/
		gpmc,cycle2cycle-diffcsen;
		/*Add "cycle2cycle-delay" between successive
		accesses to a different CS
		Добавить "cycle2cycle задержку" между последовательными
		осуществляет доступ к другим CS*/
		/*GPMC_CONFIG2*/
		gpmc,cs-on-ns = <1>; 				/*Assertion time*/
		gpmc,cs-rd-off-ns = <180>;  		/*Read deassertion time*/
		gpmc,cs-wr-off-ns = <180>;  		/*Write deassertion time*/
		/*GPMC_CONFIG3:*/
		/*gpmc,adv-on-ns = <0>; 				/*Assertion time*/
		gpmc,adv-rd-off-ns = <18>;  		/*Read deassertion time*/
		gpmc,adv-wr-off-ns = <48>;  		/*Write deassertion time*/
		/*GPMC_CONFIG4*/
		gpmc,oe-on-ns = <54>; 				/*Assertion time*/
		gpmc,oe-off-ns = <168>; 			/*Deassertion time*/
		/*GPMC_CONFIG4*/
		gpmc,we-on-ns = <54>; 				/*Assertion time*/
		gpmc,we-off-ns = <168>; 			/*Deassertion time*/
		/*GPMC_CONFIG5*/
		gpmc,rd-cycle-ns = <186>;			/*Total read cycle time */
		gpmc,wr-cycle-ns = <186>;			/*Total write cycle time*/
		gpmc,access-ns = <144>;				/*Start-cycle to first data valid delay*/
		gpmc,page-burst-access-ns = <24>;	/*Multiple access word delay*/
		gpmc,bus-turnaround-ns = <90>;		/*Turn-around time between successive accesses*/
		gpmc,cycle2cycle-delay-ns = <90>;	/*Delay between chip-select pulses*/
		/*gpmc,wait-monitoring-ns = <0>;		/*Start of wait monitoring with regard to valid data*/
		/*gpmc,clk-activation-ns = <0>;		/*GPMC clock activation time*/
		/*Boolean timing parameters. If property is present parameter enabled and disabled if omitted:*/
		/*gpmc,wr-data-mux-bus-ns = <0>;		
		/*In address-data multiplex mode, specifiesthe time when 
		the first data is driven onthe address-data bus.
		В режиме мультиплекса адреса данных, определяет
		время, когда первые данные толкнут
		bus адресные данные.*/
		/*gpmc,wr-access-ns = <0>;			
		/*In synchronous write mode, for single or
		burst accesses, defines the number of
		GPMC_FCLK cycles from start access time
		to the GPMC_CLK rising edge used by the
		memory device for the first data capture.
		В режиме синхронной записи, для одного или
		взрыв получает доступ, определяет количество
		GPMCPMC_FCLK циклов от времени доступа запуска
		к переднему фронту GPMC_CLK используется самая
		запоминающее устройство для первого сбора данных*/
		vddvario-supply = <&vddvario>;
		vdd33a-supply = <&vdd33a>;

		reg-io-width = <4>;
		smsc,save-mac-address;
		
	
		pinctrl-names = "default";
		pinctrl-0 = <&smsc_pins &smsc_pins2>;
		interrupt-parent = <&gpio1>;
		interrupts = <29 IRQ_TYPE_LEVEL_LOW>; 
		reg = <4 0 0xff>;
	};
};